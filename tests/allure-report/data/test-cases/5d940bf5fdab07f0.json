{"uid":"5d940bf5fdab07f0","name":"test_trigonometry_operations[atan(0.9)-0.7328151017865067]","fullName":"tests.test_simple_operations#test_trigonometry_operations","historyId":"00acf798e8fd72059fe20cac252c089b","time":{"start":1693154881063,"stop":1693154881064,"duration":1},"description":"\nВ рамках этих тест-кейсов разные машины могут давать разный результат.\nПричина в разных способах округления чисел с плавающей точкой.\n","descriptionHtml":"<p>В рамках этих тест-кейсов разные машины могут давать разный результат.<br />\nПричина в разных способах округления чисел с плавающей точкой.</p>\n","status":"skipped","statusMessage":"XFAIL expecting failure\n\nAssertionError: assert 0.7328151017865066 == 0.7328151017865067\n +  where 0.7328151017865066 = <bound method CalculatorModel.calculate_expression of <smartcalc.model.model.CalculatorModel object at 0x0000016739837290>>('atan(0.9)')\n +    where <bound method CalculatorModel.calculate_expression of <smartcalc.model.model.CalculatorModel object at 0x0000016739837290>> = <smartcalc.model.model.CalculatorModel object at 0x0000016739837290>.calculate_expression","statusTrace":"expression = 'atan(0.9)', expected_result = 0.7328151017865067\n\n    @allure.description(\"\"\"\n    В рамках этих тест-кейсов разные машины могут давать разный результат.\n    Причина в разных способах округления чисел с плавающей точкой.\n    \"\"\")\n    @pytest.mark.xfail(condition=lambda: True, reason='expecting failure')\n    @pytest.mark.parametrize(\"expression, expected_result\",\n                             [(\"log(10) + log(10)\", 4.605170185988092),\n                              (\"sin(4)\", -0.7568024953079282),\n                              (\"cos(8)\", -0.14550003380861354),\n                              (\"tan(5)\", -3.380515006246585),\n                              (\"asin(0.5)\", 0.5235987755982988),\n                              (\"acos(0.8)\", 0.6435011087932843),\n                              (\"atan(0.9)\", 0.7328151017865067)])\n    def test_trigonometry_operations(expression, expected_result):\n>       assert calc_model.calculate_expression(expression) == expected_result\nE       AssertionError: assert 0.7328151017865066 == 0.7328151017865067\nE        +  where 0.7328151017865066 = <bound method CalculatorModel.calculate_expression of <smartcalc.model.model.CalculatorModel object at 0x0000016739837290>>('atan(0.9)')\nE        +    where <bound method CalculatorModel.calculate_expression of <smartcalc.model.model.CalculatorModel object at 0x0000016739837290>> = <smartcalc.model.model.CalculatorModel object at 0x0000016739837290>.calculate_expression\n\ntest_simple_operations.py:46: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.xfail(condition=<function <lambda> at 0x0000016739831800>, reason='expecting failure')"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_simple_operations"},{"name":"host","value":"AndrewLaptop"},{"name":"thread","value":"5916-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_simple_operations"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_result","value":"0.7328151017865067"},{"name":"expression","value":"'atan(0.9)'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail(condition=<function <lambda> at 0x0000016739831800>, reason='expecting failure')"]},"source":"5d940bf5fdab07f0.json","parameterValues":["0.7328151017865067","'atan(0.9)'"]}