{"uid":"b6fb9e8329e01d07","name":"test_trigonometry_operations[log(10) + log(10)-4.605170185988092]","fullName":"test_simple_operations#test_trigonometry_operations","historyId":"4736f36915ce48b73f85bfa00f48a3ba","time":{"start":1733099161052,"stop":1733099161052,"duration":0},"status":"skipped","statusMessage":"XFAIL expecting failure\n\nAssertionError: assert 2.0 == 4.605170185988092\n +  where 2.0 = <bound method Model.calculate_expression of <desktop_calc.smartcalc.model.model.Model object at 0x109892900>>('log(10) + log(10)')\n +    where <bound method Model.calculate_expression of <desktop_calc.smartcalc.model.model.Model object at 0x109892900>> = <desktop_calc.smartcalc.model.model.Model object at 0x109892900>.calculate_expression","statusTrace":"expression = 'log(10) + log(10)', expected_result = 4.605170185988092, calc_model = <desktop_calc.smartcalc.model.model.Model object at 0x109892900>\n\n    @pytest.mark.xfail(condition=lambda: True, reason='expecting failure')\n    @pytest.mark.parametrize(\"expression, expected_result\",\n                             [(\"log(10) + log(10)\", 4.605170185988092),\n                              (\"sin(4)\", -0.7568024953079282),\n                              (\"cos(8)\", -0.14550003380861354),\n                              (\"tan(5)\", -3.380515006246585),\n                              (\"asin(0.5)\", 0.5235987755982988),\n                              (\"acos(0.8)\", 0.6435011087932843),\n                              (\"atan(0.9)\", 0.7328151017865067)])\n    def test_trigonometry_operations(expression, expected_result, calc_model):\n>       assert calc_model.calculate_expression(expression) == expected_result\nE       AssertionError: assert 2.0 == 4.605170185988092\nE        +  where 2.0 = <bound method Model.calculate_expression of <desktop_calc.smartcalc.model.model.Model object at 0x109892900>>('log(10) + log(10)')\nE        +    where <bound method Model.calculate_expression of <desktop_calc.smartcalc.model.model.Model object at 0x109892900>> = <desktop_calc.smartcalc.model.model.Model object at 0x109892900>.calculate_expression\n\ntest_simple_operations.py:43: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"Возвращает инстанс класса Model","time":{"start":1733099160947,"stop":1733099160947,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.xfail(condition=<function <lambda> at 0x10b44d800>, reason='expecting failure')"},{"name":"suite","value":"test_simple_operations"},{"name":"host","value":"MacBook-Pro-Andrej.local"},{"name":"thread","value":"14404-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_simple_operations"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_result","value":"4.605170185988092"},{"name":"expression","value":"'log(10) + log(10)'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.xfail(condition=<function <lambda> at 0x10b44d800>, reason='expecting failure')"]},"source":"b6fb9e8329e01d07.json","parameterValues":["4.605170185988092","'log(10) + log(10)'"]}